# -*- coding: utf-8 -*-
"""breast_cancer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nKshhBGQ7Q5NlYqZlVr8HLtSj7P6L3oZ
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score
#from sklearn import svm

from google.colab import drive
drive.mount('/content/drive')

breast_cancer = pd.read_csv("/content/drive/MyDrive/Multiple_disease_prediction/breast_cancer.csv")

breast_cancer.head()

breast_cancer.shape

breast_cancer.info()

breast_cancer.isnull().sum()

breast_cancer.drop(columns = "Unnamed: 32", axis = 1, inplace = True)

breast_cancer.head()

breast_cancer.describe()

breast_cancer["diagnosis"].value_counts()

#encoding the target column

label_encode = LabelEncoder()

labels = label_encode.fit_transform(breast_cancer["diagnosis"])

breast_cancer["target"] = labels

breast_cancer.drop(columns = "diagnosis", axis = 1, inplace = True)

breast_cancer.head()

breast_cancer["target"].value_counts()

breast_cancer.groupby("target").mean()

sns.set()
sns.countplot(x = "target", data = breast_cancer)

for column in breast_cancer:
    print(column)

for column in breast_cancer:
    sns.displot(data = breast_cancer, x = column)

sns.distplot(x=breast_cancer.radius_mean)

first_column = breast_cancer.iloc[:, 0]

second_column = breast_cancer.iloc[:, 1]

print(first_column)

print(second_column)

plt.scatter(x = first_column, y = second_column)

for column in breast_cancer:
    plt.figure()
    breast_cancer.boxplot([column])

correlation_matrix = breast_cancer.corr()

plt.figure(figsize=(25,25))
sns.heatmap(correlation_matrix, cbar=True, fmt='.2f', annot=True, cmap='Blues')
#plt.savefig('Correlation Heat map')

breast_cancer=breast_cancer.drop(columns='concave points_mean',axis=1)

breast_cancer=breast_cancer.drop(columns='area_mean',axis=1)

breast_cancer=breast_cancer.drop(columns='radius_worst',axis=1)

breast_cancer=breast_cancer.drop(columns='perimeter_worst',axis=1)

for column in breast_cancer:
    print(column)

!pip install dataprep

!pip install autoviz

!pip install pandasgui

!pip install sweetviz

from dataprep.eda import create_report
df = pd.read_csv("/content/drive/MyDrive/Multiple_disease_prediction/breast_cancer.csv")
create_report(df)

x = breast_cancer.drop(columns = "target", axis = 1)
y = breast_cancer["target"]
print(x)

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state = 2)

print(x.shape, x_train.shape, x_test.shape)

logistic_model = LogisticRegression()

logistic_model.fit(x_train, y_train)

x_train_prediction = logistic_model.predict(x_train)
training_data_accuracy = accuracy_score(y_train, x_train_prediction)

print('Accuracy on training data = ', training_data_accuracy)

x_test_prediction = logistic_model.predict(x_test)
test_data_accuracy = accuracy_score(y_test, x_test_prediction)

print('Accuracy on test data = ', test_data_accuracy)

input_data = (842302,17.99,10.38,122.8,1001,0.1184,0.2776,0.3001,0.1471,0.2419,0.07871,1.095,0.9053,8.589,153.4,0.006399,0.04904,0.05373,0.01587,0.03003,0.006193,25.38,17.33,184.6,2019,0.1622,0.6656,0.7119,0.2654,0.4601,0.1189)

input_data_as_numpy_array = np.asarray(input_data)

input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = logistic_model.predict(input_data_reshaped)
print(prediction)

if (prediction[0] == 0):
  print("The Breast cancer is Benign.")

else:
  print("The Breast Cancer is Malignant.")

import pickle

filename = "breast_cancer_model.sav"
pickle.dump(logistic_model, open(filename, "wb"))

#loading the saved model
loaded_model = pickle.load(open("breast_cancer_model.sav", "rb"))

input_data = (842302,17.99,10.38,122.8,1001,0.1184,0.2776,0.3001,0.1471,0.2419,0.07871,1.095,0.9053,8.589,153.4,0.006399,0.04904,0.05373,0.01587,0.03003,0.006193,25.38,17.33,184.6,2019,0.1622,0.6656,0.7119,0.2654,0.4601,0.1189)

input_data_as_numpy_array = np.asarray(input_data)

input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = logistic_model.predict(input_data_reshaped)
print(prediction)

if (prediction[0] == 0):
  print("The Breast cancer is Benign.")

else:
  print("The Breast Cancer is Malignant.")